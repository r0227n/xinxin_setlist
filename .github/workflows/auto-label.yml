name: Auto Label PR

on:
  pull_request:
    types: [opened, reopened]

concurrency:
  group: auto-label-${{ github.ref }}
  cancel-in-progress: true

jobs:
  auto-label:
    name: Auto Label PR by Changed Components
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Analyze file changes and detect affected components
        id: analyze_changes
        uses: ./.github/actions/check-changes
        with:
          base_sha: ${{ github.event.pull_request.base.sha }}
          head_sha: ${{ github.event.pull_request.head.sha }}

      - name: Apply labels based on changed components
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Label configuration with colors and descriptions
            const LABEL_CONFIG = {              
              // Directory-based labels
              CI: { color: 'e99695', description: 'Changes to CI/CD workflows and automation' },
              documentation: { color: '0075ca', description: 'Documentation updates and improvements' },
              script: { color: 'fbca04', description: 'Build scripts and automation tools' },
            };

            // Function to get label configuration
            const getLabelConfig = (labelName) => {
              // Generate random color for labels not in config
              const generateRandomColor = () => {
                return Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
              };

              return LABEL_CONFIG[labelName] || {
                color: generateRandomColor(),
                description: `Changes to ${labelName} package`
              };
            };

            // Function to create label if it doesn't exist
            const ensureLabelExists = async (labelName) => {
              try {
                const config = getLabelConfig(labelName);
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelName,
                  color: config.color,
                  description: config.description
                });
                console.log(`‚úÖ Created label: ${labelName}`);
              } catch (error) {
                if (error.status === 422) {
                  // Label already exists, which is expected
                  console.log(`‚ÑπÔ∏è  Label already exists: ${labelName}`);
                } else {
                  console.log(`‚ö†Ô∏è  Error creating label ${labelName}: ${error.message}`);
                }
              }
            };

            // Main labeling logic
            const processLabels = async () => {
              const labelsToAdd = new Set(); // Use Set to avoid duplicates

              // Get change analysis results
              const changedPackages = '${{ steps.analyze_changes.outputs.changed_packages }}';
              const changedTags = '${{ steps.analyze_changes.outputs.changed_tags }}';

              console.log('=== Auto Label Analysis ===');
              console.log(`Changed packages: ${changedPackages || '(none)'}`);
              console.log(`Directory tags: ${changedTags || '(none)'}`);

              // Process package changes
              if (changedPackages && changedPackages.trim()) {
                // Add specific package labels
                const packages = changedPackages.trim().split(/\s+/).filter(Boolean);
                packages.forEach(pkg => labelsToAdd.add(pkg));
                
                console.log(`üì¶ Detected packages: ${packages.join(', ')}`);
              }

              // Process directory-based tags
              if (changedTags && changedTags.trim()) {
                const tags = changedTags.trim().split(/\s+/).filter(Boolean);
                tags.forEach(tag => labelsToAdd.add(tag));
                
                console.log(`üè∑Ô∏è  Detected directory tags: ${tags.join(', ')}`);
              }

              // Apply labels if any were detected
              if (labelsToAdd.size > 0) {
                const finalLabels = Array.from(labelsToAdd);
                console.log(`üéØ Applying labels: ${finalLabels.join(', ')}`);

                // Ensure all labels exist
                for (const label of finalLabels) {
                  await ensureLabelExists(label);
                }

                // Add labels to PR
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: finalLabels
                  });
                  console.log('‚úÖ Successfully applied all labels to PR');
                } catch (error) {
                  console.log(`‚ùå Error applying labels: ${error.message}`);
                  throw error;
                }
              } else {
                console.log('‚ÑπÔ∏è  No component changes detected, no labels applied');
              }
              
              console.log('=== Auto Label Complete ===');
            };

            // Execute the labeling process
            await processLabels();
